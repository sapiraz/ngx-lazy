{"version":3,"sources":["../../src/lazy-child.directive.ts"],"names":[],"mappings":"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","file":"lazy-child.directive.js","sourceRoot":"","sourcesContent":["import {\n    Directive,\n    Component,\n    ElementRef,\n    TemplateRef,\n    ViewContainerRef,\n    Input,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ReflectiveInjector,\n    ChangeDetectorRef\n} from '@angular/core';\n\n\nexport class LazyVirtualComponent {\n    constructor(public elementRef: ElementRef) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'app-virtual-lazyload-component',\n    template: `<div class='virtual-element'></div>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\n\nexport class LazyChildDirective {\n    showing: boolean = false;\n    shownElementRef: ElementRef;\n\n    constructor(public templateRef: TemplateRef<ElementRef>,\n                private viewContainer: ViewContainerRef,\n                public elementRef: ElementRef,\n                private componentFactoryResolver: ComponentFactoryResolver,\n                private cd: ChangeDetectorRef) {}\n\n    /**\n     * Renders the original element\n     * \n     * @memberof LazyChildDirective\n     */\n    show() {\n        this.viewContainer.clear();\n        this.showing = true;\n        this.viewContainer.createEmbeddedView(this.templateRef);\n        this.shownElementRef = this.elementRef;\n        this.cd.detectChanges();\n    }\n\n    /**\n     * Hides the content of the element\n     * \n     * @param {boolean} [occupySpace=false]  Allows occupying space virtually\n     * @memberof LazyChildDirective\n     */\n    hide(occupySpace: boolean = false) {\n        this.viewContainer.clear();\n        this.showing = false;\n        if (occupySpace) {\n            this.shownElementRef = this.createVirtualComponent();\n        }\n    }\n\n    createVirtualComponent(): ElementRef {\n        let factory = this.componentFactoryResolver.resolveComponentFactory(LazyVirtualComponent);\n        let injector = ReflectiveInjector.fromResolvedProviders([], this.viewContainer.parentInjector);\n        // create component without adding it directly to the DOM\n        let comp: ComponentRef<LazyVirtualComponent> = factory.create(injector);\n        // Render virtual component\n        this.viewContainer.insert(comp.hostView);\n        return comp.instance.elementRef;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[lazyChild]',\n    exportAs: 'lazyChild'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: ElementRef, },\n{type: ComponentFactoryResolver, },\n{type: ChangeDetectorRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}