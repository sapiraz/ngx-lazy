{"version":3,"sources":["../../src/lazy-image.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,SAAS,EAET,UAAU,EACV,gBAAgB,EAChB,wBAAwB,EACxB,KAAK,EAEL,QAAQ,EACR,YAAY,EACZ,MAAM,EAAC,MAAM,eAAA,CAAgB;AAIjC;IAGI,4BAAsB,aAA+B,EAC1C,UAAsB,EACnB,wBAAkD,EACpD,SAAmB,EAClB,YAAiB;QAJR,kBAAa,GAAb,aAAa,CAAkB;QAC1C,eAAU,GAAV,UAAU,CAAY;QACnB,6BAAwB,GAAxB,wBAAwB,CAA0B;QACpD,cAAS,GAAT,SAAS,CAAU;QAClB,iBAAY,GAAZ,YAAY,CAAK;QANtB,UAAK,GAAY,KAAK,CAAC;IAO/B,CAAC;IAED,qCAAQ,GAAR;QACI,sCAAsC;QACtC,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAGD,2CAAc,GAAd;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC;IACL,CAAC;IAED,iCAAI,GAAJ;QACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7F,CAAC;IAED;;;;OAIG;IACH,yCAAY,GAAZ;QACI,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,iBAAiB;QACjD,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,qBAAqB,EAAE,CAAC;QAEzC,MAAM,CAAC,CACH,IAAI,CAAC,GAAG,IAAI,CAAC;YACb,IAAI,CAAC,IAAI,IAAI,CAAC;YACd,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC;YAC5E,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAC5E,CAAC;IACN,CAAC;IACE,6BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAE,aAAa;iBAC1B,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,iCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,gBAAgB,GAAG;QAC1B,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,wBAAwB,GAAG;QAClC,EAAC,IAAI,EAAE,QAAQ,GAAG;QAClB,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,cAAc,EAAG,EAAE,EAAG,EAAC;KAC5E,EAN6F,CAM7F,CAAC;IACK,iCAAc,GAA2C;QAChE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC/B,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,eAAe,EAAE,EAAE,EAAG,EAAE,EAAE;KACzE,CAAC;IACF,yBAAC;CA9DD,AA8DC,IAAA;SA9DY,kBAAkB","file":"lazy-image.directive.js","sourceRoot":"","sourcesContent":["import {\n    Directive,\n    TemplateRef,\n    ElementRef,\n    ViewContainerRef,\n    ComponentFactoryResolver,\n    Input, \n    OnInit,\n    Renderer,\n    HostListener,\n    Inject} from '@angular/core';\nimport { LazyElement } from './lazy-element';\n\n\nexport class LazyImageDirective implements OnInit {\n    private shown: boolean = false;\n     lazyImage: string;\n    constructor(protected viewContainer: ViewContainerRef,\n        public elementRef: ElementRef,\n        protected componentFactoryResolver: ComponentFactoryResolver,\n        private _renderer: Renderer,\n         private windowObject: any) {\n    }\n\n    ngOnInit() {\n        // Trigger an initial visibility check\n        this.onWindowScroll();\n    }\n\n    \n    onWindowScroll() {\n        if (this.isInViewport() && !this.shown) {\n            this.show();\n        }\n    }\n\n    show() {\n        this.shown = true;\n        this._renderer.setElementAttribute(this.elementRef.nativeElement, 'src', this.lazyImage);\n    }\n\n    /**\n     * Checks whether the image is now visible in it's container\n     *\n     * @memberof LazyLoadParentDirective\n     */\n    isInViewport(): boolean {\n        let result = false;\n        let window = this.windowObject; // Todo: Fix that\n        let child = this.elementRef.nativeElement;\n        var rect = child.getBoundingClientRect();\n\n        return (\n            rect.top >= 0 &&\n            rect.left >= 0 &&\n            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && \n            rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n        );\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[lazyImage]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: ElementRef, },\n{type: ComponentFactoryResolver, },\n{type: Renderer, },\n{type: undefined, decorators: [{ type: Inject, args: ['windowObject', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'lazyImage': [{ type: Input },],\n'onWindowScroll': [{ type: HostListener, args: [\"window:scroll\", [], ] },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}