{"version":3,"sources":["../../src/lazy-list-child.directive.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,WAAA,EAAY,MAAO,gBAAA,CAAiB;AAC7C,OAAO,EACH,SAAS,EAET,UAAU,EACV,WAAW,EACX,gBAAgB,EAEhB,wBAAwB,EAGxB,iBAAiB,EACpB,MAAM,eAAA,CAAgB;AAGvB;IAA4C,0CAAW;IACnD,gCAAmB,WAAoC,EACjC,aAA+B,EAClC,UAAsB,EACnB,wBAAkD,EAClD,EAAqB;QAJ3C,YAKI,kBAAM,WAAW,EACX,aAAa,EACb,UAAU,EACV,wBAAwB,EACxB,EAAE,CAAC,SACZ;QAVkB,iBAAW,GAAX,WAAW,CAAyB;QACjC,mBAAa,GAAb,aAAa,CAAkB;QAClC,gBAAU,GAAV,UAAU,CAAY;QACnB,8BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,QAAE,GAAF,EAAE,CAAmB;;IAM3C,CAAC;IACE,iCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAE,iBAAiB;oBAC3B,QAAQ,EAAE,WAAW;iBACxB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,qCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,WAAW,GAAG;QACrB,EAAC,IAAI,EAAE,gBAAgB,GAAG;QAC1B,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,wBAAwB,GAAG;QAClC,EAAC,IAAI,EAAE,iBAAiB,GAAG;KAC1B,EAN6F,CAM7F,CAAC;IACF,6BAAC;CA1BD,AA0BC,CA1B2C,WAAW,GA0BtD;SA1BY,sBAAsB","file":"lazy-list-child.directive.js","sourceRoot":"","sourcesContent":["import { LazyElement } from './lazy-element';\nimport {\n    Directive,\n    Component,\n    ElementRef,\n    TemplateRef,\n    ViewContainerRef,\n    Input,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ReflectiveInjector,\n    ChangeDetectorRef\n} from '@angular/core';\n\n\nexport class LazyListChildDirective extends LazyElement{\n    constructor(public templateRef: TemplateRef<ElementRef>,\n                protected viewContainer: ViewContainerRef,\n                public elementRef: ElementRef,\n                protected componentFactoryResolver: ComponentFactoryResolver,\n                protected cd: ChangeDetectorRef) {\n        super(templateRef,\n              viewContainer,\n              elementRef,\n              componentFactoryResolver,\n              cd);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[lazyListChild]',\n    exportAs: 'lazyChild'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: ElementRef, },\n{type: ComponentFactoryResolver, },\n{type: ChangeDetectorRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}